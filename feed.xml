<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://yihan1998.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://yihan1998.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-16T16:50:25+00:00</updated><id>https://yihan1998.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">I/O Multiplexing 301: Deep into the Heart of Eventpoll in Linux</title><link href="https://yihan1998.github.io/blog/2024/linux-epoll/" rel="alternate" type="text/html" title="I/O Multiplexing 301: Deep into the Heart of Eventpoll in Linux"/><published>2024-03-16T15:14:00+00:00</published><updated>2024-03-16T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-epoll</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-epoll/"><![CDATA[<p>In this artical, we are digging deep into the <code class="language-plaintext highlighter-rouge">Epoll</code> in Linux Kernel 5.4 on an <code class="language-plaintext highlighter-rouge">x86_64</code> architecture.</p> <h1 id="structures-and-functionalities-in-a-nutshell">Structures and functionalities in a nutshell</h1> <table> <thead> <tr> <th style="text-align: center">Term</th> <th style="text-align: center">Functionalities</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">eventpoll</td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">epitem</td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">eppoll_entry</td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">ep_pqueue</td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">epoll_filefd</td> <td style="text-align: center"> </td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="sample-posts"/><category term="Linux"/><summary type="html"><![CDATA[In this artical, we are digging deep into the Epoll in Linux Kernel 5.4 on an x86_64 architecture.]]></summary></entry><entry><title type="html">Interrupt and Exception 101</title><link href="https://yihan1998.github.io/blog/2024/linux-irq-101/" rel="alternate" type="text/html" title="Interrupt and Exception 101"/><published>2024-03-12T15:14:00+00:00</published><updated>2024-03-12T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-irq-101</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-irq-101/"><![CDATA[<h1 id="tldr">TL;DR</h1> <p>Interrupt and exception are critical mechanisms for the correct execution of operating systems. Interrupt handles events from external hardware and exception deals with events generated from the processor itself.</p> <table> <thead> <tr> <th style="text-align: center">Interrupt</th> <th style="text-align: center">Exception</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">Triggered by external hardware events</td> <td style="text-align: center">Triggered by the local processor</td> </tr> <tr> <td style="text-align: center">Asynchronous handling for external requests (e.g., keyboard input)</td> <td style="text-align: center">Synchronous handling for internal requests (e.g., memory overflow)</td> </tr> <tr> <td style="text-align: center">Could happen almost anytime anywhere during execution</td> <td style="text-align: center">Happen more deterministically</td> </tr> </tbody> </table> <h1 id="what-are-interrupt-and-exception-and-why-do-we-need-them">What are interrupt and exception and why do we need them?</h1> <p>Interrupt and exception are mechanisms to handle unusual events that happened in the current workflow. Technically speaking, any event that triggers a divergence in execution and incurs a mode switch could be considered as an interrupt or an exception. More specifically, system calls could be counted as one type of exception. But for the sake of simplicity, we will elaborate how system calls work in a separate chapter.</p> <p>The reason for having interrupt is that some events need to be processed in a timely manner. These events include but not limited to incoming of network packets, keyboard input, and inter-process interrupt.</p> <p>The reason for having exception is that errors happen constantly during runtime.</p> <h1 id="how-do-interrupt-and-exception-work">How do interrupt and exception work?</h1> <p>Interrupt and exception are often introduced together. Despite that they share a lot in common, we have to clarify the difference between them in the very beginning. I am going to use The Bear — highly recommended, though my anxiety level rockets to the sky every single time I watch it — as an example to elaborate the similarity and difference between these too concepts.</p> <h2 id="an-example-of-interrupt">An example of interrupt</h2> <p>Imagine you are Carmy. The beef is sitting nicely in the pot on the stove and you are preparing for the lunch time. Suddenly some random stupid thing happens out of blue, for example, the water pipe just simply decides to burst. What can you do about it? You are a well trained chef, not a plumber. So you phone up someone who can fix the pipe, and then return to the beef as soon as possible because it is being left unattended. Finally the guy comes and fixes the pipe just before the restaurant opens. Phew! That was close!</p> <h2 id="an-example-of-exception">An example of exception</h2> <p>You are still Carmy in this case. The beef is getting ready and the smell is so good right now. Time to prepare the assembling of the sandwiches — but wait! Someone screwed up the number of buns and now you are several dozens short of them. What choice do you have? You have to try your best to make as many buns as possible before the customers flood in. Luckily you are able to bake enough of them just half an hour prior the opening of the restaurant and now it’s time to assemble some delicious sandwiches for all those hungry mouths. Another day another dollar right?</p> <h2 id="similarities-and-differences">Similarities and differences</h2> <p>Like the beginning of the above two examples, the start of interrupt and exception are the same: someone is running some logic flow before something unexpected happens. The similarities between these two concepts are as follows:</p> <ul> <li> <p>Divergence from the current execution flow: Both temporarily leave the current execution flow of instructions and jump to a predefined entry point in the Kernel to handle a specific event.</p> </li> <li> <p>Incurring context switch (and probably mode switch as well): Both require the processor to save the current context (i.e., the register contents) into memory and restore it after the handler routine finishes.</p> </li> </ul> <p>Yet these two mechanisms exist for very different scenarios. Here I list some of the key differences between them:</p> <ul> <li> <p><strong>External vs. internal triggering</strong>: Interrupt is triggered by I/O devices like keyboard, mouse, and network interface card. Exception is triggered by the processer itself, like dividing by zero, accessing an invalid memory, or stack overflow.</p> </li> <li> <p><strong>Async vs. sync handling</strong>: Interrupt is handled in a timely and typically asynchronized manner, whilst exception is handled in a synchronized way. In other words, interrupt is acknowledged by the interrupt handler, but doesn’t have to be fully processed before returning back to the userspace. Exception, on the other hand, has to be fully resolved so that the original execution flow can resume normally.</p> </li> <li> <p><strong>Random vs. predictable</strong>: Interrupt may happen almost anytime anywhere when the system is running. Exception is more deterministic since the happen due to specific instructions or explicit events.</p> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="Linux"/><summary type="html"><![CDATA[Guardians of the operating system]]></summary></entry><entry><title type="html">Syscall 101: Introduction to System Calls</title><link href="https://yihan1998.github.io/blog/2024/linux-syscall-101/" rel="alternate" type="text/html" title="Syscall 101: Introduction to System Calls"/><published>2024-03-09T15:14:00+00:00</published><updated>2024-03-09T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-syscall-101</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-syscall-101/"><![CDATA[<p>In this chapter, we are introducing the basic concept of system calls.</p> <h1 id="tldr">TL;DR</h1> <p>System calls serve as an interface between the user space and the kernel space, allowing user-level applications to request services from the Linux kernel. System calls are often fixed up with library function, here is a comparison between syscalls, library functions, and user-defined functions:</p> <table> <thead> <tr> <th style="text-align: center">Mechanism</th> <th style="text-align: center">In a Nutshell</th> <th>Characteristics</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">Syscall</td> <td style="text-align: center">Interface that enable user space program to communicate with the Kernel</td> <td>Indirectly invoked by the programmer<br/>Implemented by the operating system <br/>Require a mode switch from user space to Kernel space</td> </tr> <tr> <td style="text-align: center">Library function</td> <td style="text-align: center">Encapsulated code that enable easier use of certain functions</td> <td>Directly used by the programmer<br/>Implemented in user space<br/>Often provided by third-party or the Kernel<br/>Generalized for various applications<br/>May act as wrappers around system calls, but doesn’t mean every library function invokes syscall</td> </tr> <tr> <td style="text-align: center">User-defined function</td> <td style="text-align: center">Functions that developer creates to perform specific tasks in their application</td> <td>Directly used by the programmer<br/>Implemented in user space<br/>Written by the user <br/>Highly customized to serve the developer’s need</td> </tr> </tbody> </table> <h1 id="what-are-system-calls-and-why-do-we-need-them">What are system calls and why do we need them</h1> <p>System calls are the interfaces exposed by the Kernel for communication between the user programs and certain Kernel services. These services include but not limited to time, file, and network. They are implemented within the Kernel mainly due to the following reasons:</p> <ul> <li> <p><strong>Efficiency and reliability</strong>: The application developers only have to include specific headers to utilize certain functionalities (e.g., file operation, network communication). Developers don’t have to worry about the correctness or implementation details of these functions.</p> </li> <li> <p><strong>Resource management</strong>: Critical and shared resources (e.g., file table) may be shared among processes. Since the Kernel has the global view of all system resources, it would be easier to avoid contention and implement fair sharing between applications.</p> </li> <li> <p><strong>Security</strong>: These services are accessible by any process in the system. Yet malicious behavior may happen in the real world, intentionally or not. Therefore, it’s vital to protect these services from being contaminated and corrupting the whole operating system.</p> <p>Now the question before us is: how should programs in the user space access these services that require Kernel privilege? This is where the system calls play their role: they act as the gate keeper, to make an entrance to the Kernel world and overwatch the invocation of the user program. Despite that different architectures may have varied sets of system calls, the workflow of system calls is universal and architecture-independent. Therefore, we are going to introduce how system call works from a general perspective. But first, we have some common misunderstanding to clarify.</p> </li> </ul> <h1 id="syscall-vs-library-function-vs-user-defined-function">Syscall vs. library function vs. user-defined function</h1> <p>Typically, a function in an application is either user-defined or provided by a library.</p> <h1 id="how-do-system-calls-work">How do system calls work</h1> <h2 id="an-example-of-a-system-call">An example of a system call</h2> <p>I always explain how system calls work to people as trying to order food in a foreign country. Imagine you walk into a restaurant, starving, but unfortunately are only capable of speaking the language at the beginner level on Duolingo. What do you do? Obviously it is too late for you to learn how to speak another language. So you pick up the menu, and thank God that the owner is considerate enough to assign numbers to each item. You decide to order #5 — whatever that is — and signal the waiter. He approaches and you say “#5 please” using your limited language skill and pray that you get it right. After some time he comes back with the right meal — luckily — and hopefully it fits your appetite.</p> <p>This is basically what happens when a program tries to invoke a system call, where the program is the nervous customer, the Kernel is the waiter, and the system call table is the menu with numbers on items.</p> <pre><code class="language-mermaid">sequenceDiagram
    participant User
    participant Kernel

    User-&gt;&gt;+Kernel: I want to read() from a socket
    Kernel-&gt;&gt;Kernel: Try to read out bytes if there is any from the socket buffer
    Kernel-&gt;&gt;-User: Return the number of read out data or -1
</code></pre> <h2 id="general-workflow">General workflow</h2> <h1 id="want-to-know-more-about-how-system-calls-are-implemented">Want to know more about how system calls are implemented?</h1>]]></content><author><name></name></author><category term="sample-posts"/><category term="Linux"/><summary type="html"><![CDATA[Gatekeepers of the Kernel world]]></summary></entry><entry><title type="html">Syscall 201: The Lifecycle of System Calls in Operaing System</title><link href="https://yihan1998.github.io/blog/2024/linux-syscall-201/" rel="alternate" type="text/html" title="Syscall 201: The Lifecycle of System Calls in Operaing System"/><published>2024-03-09T15:14:00+00:00</published><updated>2024-03-09T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-syscall-201</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-syscall-201/"><![CDATA[<p>In this article, we are getting a general overview of the life cycle of system calls — how they are defined, declared, organized, and more importantly, invoked inside the Kernel.</p> <h1 id="quick-recap-on-terminologies">Quick recap on terminologies</h1> <table> <thead> <tr> <th style="text-align: center">Terms</th> <th style="text-align: center">In a Nutshell</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">System call</td> <td style="text-align: center">Interface between userspace programs and the Kernel services</td> </tr> <tr> <td style="text-align: center">Syscall table</td> <td style="text-align: center">An array of system calls where the location of syscall functions are stored</td> </tr> <tr> <td style="text-align: center">Syscall number</td> <td style="text-align: center">The offset used to look up the corresponding syscall in the system call table</td> </tr> </tbody> </table> <h1 id="the-journey-before-the-kernel-even-exists">The journey before the Kernel even exists</h1> <h2 id="define-a-system-call-handler">Define a system call handler</h2> <p>In Linux Kernel, every system call function is defined via a macro called <code class="language-plaintext highlighter-rouge">SYSCALL_DEFINE&lt;n&gt;</code>, where <code class="language-plaintext highlighter-rouge">&lt;n&gt;</code> stands for the number of arguments this system call function takes. We shall take a closer look at this macro in the next blog.</p> <h2 id="establishment-of-system-call-table">Establishment of system call table</h2> <p>The system call table is a globally shared variable inside the Kernel. Therefore, every system call made by any process is actually accessing the same memory region where the table is stored. In short, the system call table is an array of function pointers, where the index indicates the system call number of the corresponding syscall function.</p> <p>In the actual Kernel, there could be hundreds of system calls and manually filling the table is obviously both unrealistic and not extendable. If you want to know more about the initialization trick here, do check out the following articles of system calls.</p> <h1 id="call-of-the-adventure-triggering-a-system-call">Call of the adventure: triggering a system call</h1> <p>Typically, there are two ways to invoke a system call — though this is not exactly accurate because they are fundamentally the same — direct invocation by specifying the system call number and trapping straight into the Kernel, while indirect invocation by using certain library function which does the former invocation on your behalf.</p> <p>It is worth noticing that system calls are one of the few ways that incur mode switch between the user and kernel space. The others are interrupt (e.g., from keyboard) and exception (e.g., dividing by 0), which we will cover in other chapters. The exact instruction that cause mode switching in system call differs from underlying instruction set architecture. For those who have learned assembly before, you might come across the instruction <code class="language-plaintext highlighter-rouge">int 0x80</code>. This is commonly used in <code class="language-plaintext highlighter-rouge">x86</code> architecture to invoke a system call. While in <code class="language-plaintext highlighter-rouge">x86_64</code>, such role is replaced by a faster<code class="language-plaintext highlighter-rouge">syscall</code> instruction.</p> <h1 id="dive-into-the-kernel-world">Dive into the Kernel world</h1> <h1 id="execute-the-system-call">Execute the system call</h1> <h1 id="return-back-to-the-userspace">Return back to the userspace</h1>]]></content><author><name></name></author><category term="sample-posts"/><category term="Linux"/><summary type="html"><![CDATA[Initialization, invocation, and execution of system calls]]></summary></entry><entry><title type="html">Syscall 301: A Deep Dive into the System Calls in Linux Kernel</title><link href="https://yihan1998.github.io/blog/2024/linux-syscall-301/" rel="alternate" type="text/html" title="Syscall 301: A Deep Dive into the System Calls in Linux Kernel"/><published>2024-03-09T15:14:00+00:00</published><updated>2024-03-09T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-syscall-301</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-syscall-301/"><![CDATA[<p>In this artical, we are taking a deep dive into the system calls in Linux Kernel 5.4 on an <code class="language-plaintext highlighter-rouge">x86_64</code> architecture.</p> <h1 id="set-up-the-syscall-table">Set up the syscall table</h1> <p>The Linux Kernel utilizes a lot of tricks in C in an impressive way and the syscall table initilization is one of my favourite. It is a perfect example of how coding in C can be elegant, flexible, and creative.</p> <p>The definition of syscall table – also known as <code class="language-plaintext highlighter-rouge">sys_call_table</code> in the Linux Kernel – locates in <code class="language-plaintext highlighter-rouge">/arch/x86/entry/syscall_64.c</code> and is an array of function pointers. Below is the source code that performs syscall table setup:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define __SYSCALL_64(nr, sym, qual) extern asmlinkage long sym(const struct pt_regs *);
#include</span> <span class="cpf">&lt;asm/syscalls_64.h&gt;</span><span class="cp">
#undef __SYSCALL_64
</span>
<span class="cp">#define __SYSCALL_64(nr, sym, qual) [nr] = sym,
</span>
<span class="n">asmlinkage</span> <span class="k">const</span> <span class="n">sys_call_ptr_t</span> <span class="n">sys_call_table</span><span class="p">[</span><span class="n">__NR_syscall_max</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
	<span class="p">[</span><span class="mi">0</span> <span class="p">...</span> <span class="n">__NR_syscall_max</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">__x64_sys_ni_syscall</span><span class="p">,</span>
<span class="cp">#include</span> <span class="cpf">&lt;asm/syscalls_64.h&gt;</span><span class="cp">
</span><span class="p">};</span>

<span class="cp">#undef __SYSCALL_64
</span></code></pre></div></div> <p>Remember we talked about the how unrealistic to manually initialize the syscall table in the previous artical? Here we are going to unveal the magic trick applied by the Linux Kernel, which is the use of <code class="language-plaintext highlighter-rouge">#define</code>, <code class="language-plaintext highlighter-rouge">#include</code>, and <code class="language-plaintext highlighter-rouge">#undef</code>.</p> <blockquote> <p>The first <code class="language-plaintext highlighter-rouge">__SYSCALL_64</code> generates the declaration of every syscall handler.</p> <p>The second <code class="language-plaintext highlighter-rouge">__SYSCALL_64</code> loads the address syscall handler into the <code class="language-plaintext highlighter-rouge">sys_call_table</code>, using their syscall number as the index within the syscall table array.</p> </blockquote> <p>Such a creative way of using the feature of C during the preprocessing phase! By defining, undefining, and redefining only one macro, the preprocessor could automatically generate all declaration of every syscall handler and the whole syscall table! How seemingless yet highly efficient it is!</p> <p>Now, if you are still curious about what is in this header, and how it is loaded when included, fasten your seat belt because we are going follow the preprocessor to see how miracle is performed. Allons-y!</p> <h2 id="what-is-in-asmsyscalls_64h">What is in <code class="language-plaintext highlighter-rouge">&lt;asm/syscalls_64.h&gt;</code>?</h2> <p>When I saw the above syscall initialization for the first time, I was shocked and confused: how and why does <code class="language-plaintext highlighter-rouge">&lt;asm/syscalls_64.h&gt;</code> get included here twice yet expanded into two different pieces of codes?</p> <p>To understand why, we need to look into the content of this header, which locates under <code class="language-plaintext highlighter-rouge">/arch/x86/include/generated/asm/syscalls_64.h</code>. Below is a clip of it:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__SYSCALL_64</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">__x64_sys_read</span><span class="p">,</span> <span class="p">)</span>
<span class="n">__SYSCALL_64</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">__x64_sys_write</span><span class="p">,</span> <span class="p">)</span>
<span class="n">__SYSCALL_64</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">__x64_sys_open</span><span class="p">,</span> <span class="p">)</span>
<span class="n">__SYSCALL_64</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">__x64_sys_close</span><span class="p">,</span> <span class="p">)</span>
<span class="p">...</span>
</code></pre></div></div> <p>For the sake of simplicity, I only show the what will be left after the preprocessing phase on the <code class="language-plaintext highlighter-rouge">x86_64</code> architecture. In the actual header, the Kernel uses other <code class="language-plaintext highlighter-rouge">#ifdef</code> directive to support more flexible Kernel configuration during preprocessing.</p> <p>To make things easier to understand, let’s take <code class="language-plaintext highlighter-rouge">read</code> for an example to see how the two different <code class="language-plaintext highlighter-rouge">__SYSCALL_64</code> macros expand the above mappings separatedly.</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define __SYSCALL_64(nr, sym, qual) extern asmlinkage long sym(const struct pt_regs *);
</span><span class="k">extern</span> <span class="n">asmlinkage</span> <span class="kt">long</span> <span class="nf">__x86_sys_read</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">pt_regs</span> <span class="o">*</span><span class="p">);</span>
<span class="p">...</span>
<span class="cp">#undef __SYSCALL_64
</span>
<span class="cp">#define __SYSCALL_64(nr, sym, qual) [nr] = sym,
</span>
<span class="n">asmlinkage</span> <span class="k">const</span> <span class="n">sys_call_ptr_t</span> <span class="n">sys_call_table</span><span class="p">[</span><span class="n">__NR_syscall_max</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
	<span class="p">[</span><span class="mi">0</span> <span class="p">...</span> <span class="n">__NR_syscall_max</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">__x64_sys_ni_syscall</span><span class="p">,</span>
	<span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">__x86_sys_read</span><span class="p">,</span>
	<span class="p">...</span>
<span class="p">};</span>

<span class="cp">#undef __SYSCALL_64
</span></code></pre></div></div> <p>As shown above, the first <code class="language-plaintext highlighter-rouge">__SYSCALL_64</code> expands the header into the declaration of syscall handlers, which will later be used to locate the handler entry during syscall table lookup. Notably, before expanding the second <code class="language-plaintext highlighter-rouge">__SYSCALL_64</code>, the Kernel first initializes all syscall handler to be <code class="language-plaintext highlighter-rouge">__x64_sys_ni_syscall </code>, just in case any unsupported syscall number triggers a segmentation fault and blow up the whole Kernel. After this, the second <code class="language-plaintext highlighter-rouge">__SYSCALL_64</code> associates the syscall handler with its syscall number in the table. In this way, the Kernel implements a general setup of syscall table, independent from the varied syscall mapping on different hardware platforms.</p> <h2 id="why-does-archx86includegenerated-seem-weird">Why does <code class="language-plaintext highlighter-rouge">/arch/x86/include/generated</code> seem weird?</h2> <p>My first impression when I looked at this path is: how could someone name the folder to be <code class="language-plaintext highlighter-rouge">generated</code>? The answer may <em>not</em> surprise you: because this folder <strong>is</strong> generated! But how, why, and by whom?</p> <p>With a simple searching in the repository, we can easily locate the creator of the <code class="language-plaintext highlighter-rouge">generated/</code> folder — the <code class="language-plaintext highlighter-rouge">Makefile</code> under <code class="language-plaintext highlighter-rouge">/arch/x86/syscalls/</code>. Below is the part of it that is associated with the generation of syscall related files.</p> <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">out</span> <span class="o">:=</span> <span class="nb">arch</span>/<span class="p">$(</span>SRCARCH<span class="p">)</span>/include/generated/asm

<span class="nv">syscall64</span> <span class="o">:=</span> <span class="p">$(</span>srctree<span class="p">)</span>/<span class="p">$(</span>src<span class="p">)</span>/syscall_64.tbl

<span class="nv">systbl</span> <span class="o">:=</span> <span class="p">$(</span>srctree<span class="p">)</span>/<span class="p">$(</span>src<span class="p">)</span>/syscalltbl.sh

<span class="nl">$(out)/syscalls_64.h</span><span class="o">:</span> <span class="nf">$(syscall64) $(systbl)</span>
	<span class="p">$(</span>call if_changed,systbl<span class="p">)</span>
</code></pre></div></div> <p>Basically, what it does is to call <code class="language-plaintext highlighter-rouge">syscalltbl.sh</code> that takes <code class="language-plaintext highlighter-rouge">syscall_64.tbl</code> as input and generates <code class="language-plaintext highlighter-rouge">syscalls_64.h</code>. How the bash script work is too detailed for this article, but in one sentence, it maps every single syscall number to its handler entry in a format of <code class="language-plaintext highlighter-rouge">__SYSCALL_64/X32(*index*, *handler_entry*)</code> in <code class="language-plaintext highlighter-rouge">syscalls_64.h</code>. The header file shall be regenerated if there is any changes in <code class="language-plaintext highlighter-rouge">syscalltbl.sh</code> or <code class="language-plaintext highlighter-rouge">syscall_64.tbl</code>. In fact, this is a universal approach for every hardware architecture that supports the Linux Kernel to automatically create the syscall header. If you look into the source code of version 5.4, there is some <code class="language-plaintext highlighter-rouge">Makefile</code> in each subfolder under <code class="language-plaintext highlighter-rouge">/arch/</code> that serves the same purpose like the commands above.</p> <p>Now let’s see how syscall numbers and syscall handler are mapped in <code class="language-plaintext highlighter-rouge">syscall_64.tbl</code>:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># The format is:</span>
<span class="c"># &lt;number&gt; &lt;abi&gt; &lt;name&gt; &lt;entry point&gt;</span>
<span class="c"># The abi is "common", "64", or "x32" for this file</span>
0	common	<span class="nb">read		</span>__x64_sys_read
1	common	write	__x64_sys_write
2	common	open		__x64_sys_open
3	common	close	__x64_sys_close
...
19	64		readv	__x64_sys_readv
20	64		writev	__x64_sys_writev
...
512	x32		readv	__x32_compat_sys_readv
513	x32		writev	__x32_compat_sys_writev
...
</code></pre></div></div> <p>It’s clear from the clip above that this file supports three types of ABI: <code class="language-plaintext highlighter-rouge">common</code> (for both 32-bit and 64-bit), <code class="language-plaintext highlighter-rouge">64</code> (for 64-bit), and <code class="language-plaintext highlighter-rouge">x32</code> (for 32-bit). You can also easily distinguish their type based on the prefix of the handler entry.</p> <h1 id="define-a-system-call-handler">Define a system call handler</h1> <p>If you try to search for the syscall handler we’ve mentioned above (e.g., <code class="language-plaintext highlighter-rouge">__x64_sys_read</code>), you might be confused when you fail to see any function with that name in the Kernel source code. Why and how could it be possible? The answer lies in another header file – <code class="language-plaintext highlighter-rouge">/include/linux/syscalls.h</code> – and we are about to be amazed by the wisdom of system designers again.</p> <h2 id="how-is-a-syscall-hander-be-defined">How is a syscall hander be defined?</h2> <p>Let’s take <code class="language-plaintext highlighter-rouge">read</code> as an exmaple again. The actual implementation locates in <code class="language-plaintext highlighter-rouge">/fs/read_write.c</code> and is defined as follows:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SYSCALL_DEFINE3</span><span class="p">(</span><span class="n">read</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">char</span> <span class="n">__user</span> <span class="o">*</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</code></pre></div></div> <p>This doesn’t seem like an ordinary defination of a function, so what is <code class="language-plaintext highlighter-rouge">SYSCALL_DEFINE3</code> macro and how does the Linux Kernel turn the above definition into <code class="language-plaintext highlighter-rouge">__x64_sys_read</code> in the syscall table?</p> <p>If we go back to the definition of syscall table, we shall find that it is defined as an array of <code class="language-plaintext highlighter-rouge">sys_call_ptr_t</code>, which based on its name, we know it should be a function pointer pointing to syscall handler. It is defined in <code class="language-plaintext highlighter-rouge">/arch/x86/include/asm/syscall.h</code> as follows:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="n">asmlinkage</span> <span class="nf">long</span> <span class="p">(</span><span class="o">*</span><span class="n">sys_call_ptr_t</span><span class="p">)(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">pt_regs</span> <span class="o">*</span><span class="p">);</span>
</code></pre></div></div> <p>According to this definition, each syscall handler should take <code class="language-plaintext highlighter-rouge">const struct pt_regs *</code> – which saves the register context – as the single argument and return a long variable. But why didn’t we see <code class="language-plaintext highlighter-rouge">const struct pt_regs *</code> in the argument list of <code class="language-plaintext highlighter-rouge">SYSCALL_DEFINE3</code>? What steps are performed between the Kernel passes <code class="language-plaintext highlighter-rouge">struct pt_regs</code> to the syscall handler entry and the ultimate handler is invoked?</p> <p>Let’s begin with <code class="language-plaintext highlighter-rouge">SYSCALL_DEFINE&lt;n&gt;</code> macro in <code class="language-plaintext highlighter-rouge">/include/linux/syscalls.h</code>. The purpose of this macro is to define a format of syscall handler within the Kernel. As we mentioned in the previous article, the <code class="language-plaintext highlighter-rouge">&lt;n&gt;</code> here stands for the number of arguments that this syscall handler takes. Although there is no restriction on the number of arguments for a C function, a caller on the <code class="language-plaintext highlighter-rouge">x86_64</code> architecture can use at most 6 registers for argument passing to the callee, which are <code class="language-plaintext highlighter-rouge">%rdi, %rsi, %rdx, %rcx, %r8, %r9</code> in left-to-right order. Therefore, the <code class="language-plaintext highlighter-rouge">&lt;n&gt;</code> in <code class="language-plaintext highlighter-rouge">SYSCALL_DEFINE&lt;n&gt;</code> macro ranges from 0 to 6 on <code class="language-plaintext highlighter-rouge">x86_64</code>. Here is the definition of the series of <code class="language-plaintext highlighter-rouge">SYSCALL_DEFINE&lt;n&gt;</code> macro:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define SYSCALL_DEFINE_MAXARGS	6
</span>
<span class="cp">#define SYSCALL_DEFINE1(name, ...) SYSCALL_DEFINEx(1, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE2(name, ...) SYSCALL_DEFINEx(2, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE3(name, ...) SYSCALL_DEFINEx(3, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE4(name, ...) SYSCALL_DEFINEx(4, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE5(name, ...) SYSCALL_DEFINEx(5, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE6(name, ...) SYSCALL_DEFINEx(6, _##name, __VA_ARGS__)
</span>
<span class="cp">#define SYSCALL_DEFINEx(x, sname, ...)				\
	__SYSCALL_DEFINEx(x, sname, __VA_ARGS__)
</span></code></pre></div></div> <p>What worth noticing is the <code class="language-plaintext highlighter-rouge">SYSCALL_DEFINE0</code> macro, which might be defined differently across hardware architecture. On <code class="language-plaintext highlighter-rouge">x86_64</code>, it is defined in <code class="language-plaintext highlighter-rouge">/arch/x86/include/asm/syscall_wrapper.h</code> as follows:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * As the generic SYSCALL_DEFINE0() macro does not decode any parameters for
 * obvious reasons, and passing struct pt_regs *regs to it in %rdi does not
 * hurt, we only need to re-define it here to keep the naming congruent to
 * SYSCALL_DEFINEx()
 */</span>
<span class="cp">#ifndef SYSCALL_DEFINE0
#define SYSCALL_DEFINE0(sname)						\
	asmlinkage long __x64_sys_##sname(const struct pt_regs *__unused);\
	asmlinkage long __x64_sys_##sname(const struct pt_regs *__unused)
#endif
</span></code></pre></div></div> <p>Now we have reached the end of syscalls that takes no argument (e.g., <code class="language-plaintext highlighter-rouge">fork</code> and <code class="language-plaintext highlighter-rouge">getpid</code>). Let’s see how <code class="language-plaintext highlighter-rouge">SYSCALL_DEFINEx</code> helps to implement an uniform interface for various syscalls that may have different number of arguments. On <code class="language-plaintext highlighter-rouge">x86_64</code>, <code class="language-plaintext highlighter-rouge">__SYSCALL_DEFINEx</code> is defined in <code class="language-plaintext highlighter-rouge">/arch/x86/include/asm/syscall_wrapper.h</code> as follows:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * Instead of the generic __SYSCALL_DEFINEx() definition, this macro takes
 * struct pt_regs *regs as the only argument of the syscall stub named
 * __x64_sys_*(). It decodes just the registers it needs and passes them on to
 * the __se_sys_*() wrapper performing sign extension and then to the
 * __do_sys_*() function doing the actual job. These wrappers and functions
 * are inlined (at least in very most cases), meaning that the assembly looks
 * as follows (slightly re-ordered for better readability):
 *
 * &lt;__x64_sys_recv&gt;:		&lt;-- syscall with 4 parameters
 *	callq	&lt;__fentry__&gt;
 *
 *	mov	0x70(%rdi),%rdi	&lt;-- decode regs-&gt;di
 *	mov	0x68(%rdi),%rsi	&lt;-- decode regs-&gt;si
 *	mov	0x60(%rdi),%rdx	&lt;-- decode regs-&gt;dx
 *	mov	0x38(%rdi),%rcx	&lt;-- decode regs-&gt;r10
 *
 *	xor	%r9d,%r9d	&lt;-- clear %r9
 *	xor	%r8d,%r8d	&lt;-- clear %r8
 *
 *	callq	__sys_recvfrom	&lt;-- do the actual work in __sys_recvfrom()
 *				    which takes 6 arguments
 *
 *	cltq			&lt;-- extend return value to 64-bit
 *	retq			&lt;-- return
 *
 * This approach avoids leaking random user-provided register content down
 * the call chain.
 */</span>
<span class="cp">#define __SYSCALL_DEFINEx(x, name, ...)					\
	asmlinkage long __x64_sys##name(const struct pt_regs *regs);	\
	static long __se_sys##name(__MAP(x,__SC_LONG,__VA_ARGS__));	\
	static inline long __do_sys##name(__MAP(x,__SC_DECL,__VA_ARGS__));\
	asmlinkage long __x64_sys##name(const struct pt_regs *regs)	\
	{								\
		return __se_sys##name(SC_X86_64_REGS_TO_ARGS(x,__VA_ARGS__));\
	}								\
	static long __se_sys##name(__MAP(x,__SC_LONG,__VA_ARGS__))	\
	{								\
		long ret = __do_sys##name(__MAP(x,__SC_CAST,__VA_ARGS__));\
		__MAP(x,__SC_TEST,__VA_ARGS__);				\
		return ret;						\
	}								\
	static inline long __do_sys##name(__MAP(x,__SC_DECL,__VA_ARGS__))
</span></code></pre></div></div> <p>In short, this macro involves multiple declaration and definition to hide the process of extracting arguments from register context. But let’s start with the invocation chain first. Using <code class="language-plaintext highlighter-rouge">read</code> as an example, the invocation chain is <code class="language-plaintext highlighter-rouge">__x64_sys_read</code> -&gt; <code class="language-plaintext highlighter-rouge">__se_sys_read</code> -&gt; <code class="language-plaintext highlighter-rouge">__do_sys_read</code>. Therefore, the code for <code class="language-plaintext highlighter-rouge">read</code> is within a local function named <code class="language-plaintext highlighter-rouge">__do_sys_read</code>. Now we will move on to the more complicated process – the declaration and extraction of syscall arguments.</p> <h2 id="how-to-deal-with-different-number-of-arguments">How to deal with different number of arguments?</h2> <p>Let’s parse the above definition of <code class="language-plaintext highlighter-rouge">__SYSCALL_DEFINEx</code> into the three functions and go through them one by one.</p> <h3 id="extract-the-maximum-number-of-arguments-from-register-context">Extract the maximum number of arguments from register context</h3> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">asmlinkage</span> <span class="kt">long</span> <span class="n">__x64_sys</span><span class="err">##</span><span class="n">name</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">pt_regs</span> <span class="o">*</span><span class="n">regs</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">return</span> <span class="n">__se_sys</span><span class="err">##</span><span class="n">name</span><span class="p">(</span><span class="n">SC_X86_64_REGS_TO_ARGS</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">__VA_ARGS__</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Mapping of registers to parameters for syscalls on x86-64 and x32 */</span>
<span class="cp">#define SC_X86_64_REGS_TO_ARGS(x, ...)					\
	__MAP(x,__SC_ARGS						\
		,,regs-&gt;di,,regs-&gt;si,,regs-&gt;dx				\
		,,regs-&gt;r10,,regs-&gt;r8,,regs-&gt;r9)			\
</span></code></pre></div></div> <h3 id="cast-the-register-content-into-the-required-type">Cast the register content into the required type</h3> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">long</span> <span class="n">__se_sys</span><span class="err">##</span><span class="n">name</span><span class="p">(</span><span class="n">__MAP</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">__SC_LONG</span><span class="p">,</span><span class="n">__VA_ARGS__</span><span class="p">))</span>
<span class="p">{</span>
	<span class="kt">long</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">__do_sys</span><span class="err">##</span><span class="n">name</span><span class="p">(</span><span class="n">__MAP</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">__SC_CAST</span><span class="p">,</span><span class="n">__VA_ARGS__</span><span class="p">));</span>
	<span class="n">__MAP</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">__SC_TEST</span><span class="p">,</span><span class="n">__VA_ARGS__</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="invocation-of-the-ultimate-syscall-handler">Invocation of the ultimate syscall handler</h3> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kr">inline</span> <span class="kt">long</span> <span class="n">__do_sys</span><span class="err">##</span><span class="n">name</span><span class="p">(</span><span class="n">__MAP</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">__SC_DECL</span><span class="p">,</span><span class="n">__VA_ARGS__</span><span class="p">))</span>
</code></pre></div></div> <h3 id="definition-of-argument-lists-via-__map">Definition of argument lists via <code class="language-plaintext highlighter-rouge">__MAP</code></h3> <p>Now let’s see how <code class="language-plaintext highlighter-rouge">__MAP</code> macro deals with handler arguments. The definition is within <code class="language-plaintext highlighter-rouge">/include/linux/syscalls.h</code> as follows:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * __MAP - apply a macro to syscall arguments
 * __MAP(n, m, t1, a1, t2, a2, ..., tn, an) will expand to
 *    m(t1, a1), m(t2, a2), ..., m(tn, an)
 * The first argument must be equal to the amount of type/name
 * pairs given.  Note that this list of pairs (i.e. the arguments
 * of __MAP starting at the third one) is in the same format as
 * for SYSCALL_DEFINE&lt;n&gt;/COMPAT_SYSCALL_DEFINE&lt;n&gt;
 */</span>
<span class="cp">#define __MAP0(m,...)
#define __MAP1(m,t,a,...) m(t,a)
#define __MAP2(m,t,a,...) m(t,a), __MAP1(m,__VA_ARGS__)
#define __MAP3(m,t,a,...) m(t,a), __MAP2(m,__VA_ARGS__)
#define __MAP4(m,t,a,...) m(t,a), __MAP3(m,__VA_ARGS__)
#define __MAP5(m,t,a,...) m(t,a), __MAP4(m,__VA_ARGS__)
#define __MAP6(m,t,a,...) m(t,a), __MAP5(m,__VA_ARGS__)
#define __MAP(n,...) __MAP##n(__VA_ARGS__)
</span>
<span class="cp">#define __SC_DECL(t, a)	t a
#define __TYPE_AS(t, v)	__same_type((__force t)0, v)
#define __TYPE_IS_L(t)	(__TYPE_AS(t, 0L))
#define __TYPE_IS_UL(t)	(__TYPE_AS(t, 0UL))
#define __TYPE_IS_LL(t) (__TYPE_AS(t, 0LL) || __TYPE_AS(t, 0ULL))
#define __SC_LONG(t, a) __typeof(__builtin_choose_expr(__TYPE_IS_LL(t), 0LL, 0L)) a
#define __SC_CAST(t, a)	(__force t) a
#define __SC_TYPE(t, a)	t
#define __SC_ARGS(t, a)	a
#define __SC_TEST(t, a) (void)BUILD_BUG_ON_ZERO(!__TYPE_IS_LL(t) &amp;&amp; sizeof(t) &gt; sizeof(long))
</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">__MAP&lt;n&gt;</code> series is a recursive definition.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="Linux"/><summary type="html"><![CDATA[Highly detailed walkthrough of system call mechanism]]></summary></entry><entry><title type="html">WebAssembly 101</title><link href="https://yihan1998.github.io/blog/2024/intro-to-wasm/" rel="alternate" type="text/html" title="WebAssembly 101"/><published>2024-03-08T18:06:00+00:00</published><updated>2024-03-08T18:06:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/intro-to-wasm</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/intro-to-wasm/"><![CDATA[<h1 id="what-is-webassembly-wasm">What is WebAssembly (WASM)?</h1>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="toc"/><category term="sidebar"/><summary type="html"><![CDATA[Introduction to WebAssembly]]></summary></entry><entry><title type="html">I/O Multiplexing 101</title><link href="https://yihan1998.github.io/blog/2024/linux-io-multiplex/" rel="alternate" type="text/html" title="I/O Multiplexing 101"/><published>2024-03-06T15:14:00+00:00</published><updated>2024-03-06T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-io-multiplex</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-io-multiplex/"><![CDATA[<p>In this article, we are going to introduce the basic concept of I/O multiplexing and some of the commonly used mechanisms in real world.</p> <h1 id="tldr">TL;DR</h1> <table> <thead> <tr> <th style="text-align: center">Mechanism</th> <th style="text-align: center">In a Nutshell</th> <th style="text-align: center">Use Cases</th> </tr> </thead> <tbody> <tr> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">Select</code></td> <td style="text-align: center">:crown: OG of I/O multiplexing</td> <td style="text-align: center">To handle a small set of connections</td> </tr> <tr> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">Poll</code></td> <td style="text-align: center">:raised_hand: I’m like you but with flexible set of file descriptors</td> <td style="text-align: center">To handle more connections</td> </tr> <tr> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">Epoll</code></td> <td style="text-align: center">:raised_hands: I’m like you two but more scalable</td> <td style="text-align: center">Commonly used in high-performace server applications when there are thousands of connections</td> </tr> <tr> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">Eventfd</code></td> <td style="text-align: center">:v:Here to provide lightweight notification</td> <td style="text-align: center">Lightweight synchronization between threads. Can be combined with <code class="language-plaintext highlighter-rouge">epoll</code> to achieve asynchronous event notification in multi-threaded envirnment.</td> </tr> </tbody> </table> <h1 id="what-is-io-multiplexing-and-why-do-we-need-it">What is I/O multiplexing and why do we need it</h1> <h2 id="examples-of-io-without-and-with-multiplexing">Examples of I/O without and with multiplexing</h2> <p>Imagine you are a bartender. It’s 3pm and the bar is quite empty. You are staring at the ceiling, lost in your mind, when a man comes in and ask for an Irish Coffee. You start to brew a fresh cup of coffee when he begins to talk about how the recent economic depression hits the company he is working for. You blend one ounce of Irish whiskey into the hot coffee when he complains the shrank bonus making him harder to pay for the mortgage and the life expenses of his family. You pour a large spoon of heavy cream on top of the liquor and watch him swallowing as if it’s the panacea to save his life. He finishes with a long sigh and you gaze after him as he fades into the shadow of skyscrapers. Then you sink into your thoughts once again.</p> <p>The bar gets busier as the night falls and there is no time for you to doze off. A group of traders from a nearby startup just close a big deal and they are celebrating with rounds of tequila shot. You are busy cutting lemon wedges when a guy with a sullen look comes in and asks for the strongest drink — nasty breakup you guess. You fix him a Long Island and hope this may help him forget about the pain for tonight. Yet he bursts out crying and mumbling about how his girlfriend dumped him for another man. Your best comforting words are “I’m sure you have done your best” and “you deserve better” because the trading guys ask for another round of margarita and you are too busy shaking the bottles. Eventually, the friends of the heartbroken guy come to pick him up and the traders leave for the next place to continue their drinking marathon. Finally you call it a night with exhausted mind and hurting wrists.</p> <p>In the first scenario, you are performing I/O without multiplexing because there is <em>only one client to be served</em>. Yet in the second one, you are performing I/O with multiplexing due to the need to <em>serve multiple clients simultaniously</em>.</p> <h1 id="select-og-of-io-multiplexing"><code class="language-plaintext highlighter-rouge">Select</code>: OG of I/O Multiplexing</h1> <h2 id="how-select-works">How <code class="language-plaintext highlighter-rouge">select</code> works</h2> <h2 id="example-code">Example code</h2> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/select.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">fd_set</span> <span class="n">readfds</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">timeval</span> <span class="n">tv</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">retval</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">stdin_fd</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// Watch stdin (fd 0) to see when it has input.</span>
    <span class="n">FD_ZERO</span><span class="p">(</span><span class="o">&amp;</span><span class="n">readfds</span><span class="p">);</span>
    <span class="n">FD_SET</span><span class="p">(</span><span class="n">stdin_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">readfds</span><span class="p">);</span>

    <span class="c1">// Wait up to five seconds.</span>
    <span class="n">tv</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="n">tv</span><span class="p">.</span><span class="n">tv_usec</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">retval</span> <span class="o">=</span> <span class="n">select</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">readfds</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tv</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">retval</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"select()"</span><span class="p">);</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">retval</span><span class="p">)</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Data is available now.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">else</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"No data within five seconds.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="advantages-and-limitations">Advantages and limitations</h2> <h2 id="typical-use-cases">Typical use cases</h2> <h1 id="poll-for-better-connection-scalability"><code class="language-plaintext highlighter-rouge">Poll</code>: For better connection scalability</h1> <h2 id="how-poll-works">How <code class="language-plaintext highlighter-rouge">poll</code> works</h2> <h2 id="differences-and-similarities-with-select">Differences and similarities with <code class="language-plaintext highlighter-rouge">select</code></h2> <h2 id="example-code-1">Example code</h2> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;poll.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">pollfd</span> <span class="n">fds</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">timeout_msecs</span> <span class="o">=</span> <span class="mi">5000</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">retval</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">stdin_fd</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// Watch stdin (fd 0) for input.</span>
    <span class="n">fds</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">fd</span> <span class="o">=</span> <span class="n">stdin_fd</span><span class="p">;</span>
    <span class="n">fds</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">events</span> <span class="o">=</span> <span class="n">POLLIN</span><span class="p">;</span>

    <span class="n">retval</span> <span class="o">=</span> <span class="n">poll</span><span class="p">(</span><span class="n">fds</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">timeout_msecs</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">retval</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"poll()"</span><span class="p">);</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">retval</span><span class="p">)</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Data is available now.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">else</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"No data within five seconds.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="advantages-and-limitations-1">Advantages and limitations</h2> <h2 id="typical-use-cases-1">Typical use cases</h2> <h1 id="epoll-im-you-but-stronger"><code class="language-plaintext highlighter-rouge">Epoll</code>: I’m you, but stronger!</h1> <h2 id="how-epoll-works">How <code class="language-plaintext highlighter-rouge">epoll</code> works</h2> <h2 id="edge-triggered-vs-level-triggered-modes">Edge-triggered vs. level-triggered modes</h2> <h2 id="example-code-2">Example code</h2> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/epoll.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">stdin_fd</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">epoll_fd</span> <span class="o">=</span> <span class="n">epoll_create1</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="k">struct</span> <span class="n">epoll_event</span> <span class="n">ev</span><span class="p">,</span> <span class="n">events</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>

    <span class="n">ev</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">fd</span> <span class="o">=</span> <span class="n">stdin_fd</span><span class="p">;</span>
    <span class="n">ev</span><span class="p">.</span><span class="n">events</span> <span class="o">=</span> <span class="n">EPOLLIN</span><span class="p">;</span>
    <span class="n">epoll_ctl</span><span class="p">(</span><span class="n">epoll_fd</span><span class="p">,</span> <span class="n">EPOLL_CTL_ADD</span><span class="p">,</span> <span class="n">stdin_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ev</span><span class="p">);</span>

    <span class="n">n</span> <span class="o">=</span> <span class="n">epoll_wait</span><span class="p">(</span><span class="n">epoll_fd</span><span class="p">,</span> <span class="n">events</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5000</span><span class="p">);</span> <span class="c1">// 5 seconds</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">events</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">data</span><span class="p">.</span><span class="n">fd</span> <span class="o">==</span> <span class="n">stdin_fd</span><span class="p">)</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"Data is available to read.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">close</span><span class="p">(</span><span class="n">epoll_fd</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="advantages-and-limitations-2">Advantages and limitations</h2> <h2 id="typical-use-cases-2">Typical use cases</h2> <h1 id="eventfd-to-the-world-of-event-driven-programming"><code class="language-plaintext highlighter-rouge">Eventfd</code>: To the world of event-driven programming</h1> <h2 id="how-eventfd-works">How <code class="language-plaintext highlighter-rouge">eventfd</code> works</h2> <h2 id="how-eventfd-complements-epoll">How <code class="language-plaintext highlighter-rouge">eventfd</code> complements <code class="language-plaintext highlighter-rouge">epoll</code></h2> <h2 id="example-code-3">Example code</h2> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;err.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;inttypes.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/eventfd.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="kt">int</span>       <span class="n">efd</span><span class="p">;</span>
  <span class="kt">uint64_t</span>  <span class="n">u</span><span class="p">;</span>
  <span class="kt">ssize_t</span>   <span class="n">s</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Usage: %s &lt;num&gt;...</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">efd</span> <span class="o">=</span> <span class="n">eventfd</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">efd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">err</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">,</span> <span class="s">"eventfd"</span><span class="p">);</span>

    <span class="k">switch</span> <span class="p">(</span><span class="n">fork</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"Child writing %s to efd</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
            <span class="n">u</span> <span class="o">=</span> <span class="n">strtoull</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
                    <span class="cm">/* strtoull() allows various bases */</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">efd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">u</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">));</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">!=</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">))</span>
                <span class="n">err</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">,</span> <span class="s">"write"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Child completed write loop</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

        <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_SUCCESS</span><span class="p">);</span>

    <span class="nl">default:</span>
        <span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

        <span class="n">printf</span><span class="p">(</span><span class="s">"Parent about to read</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">efd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">u</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">));</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">!=</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">))</span>
            <span class="n">err</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">,</span> <span class="s">"read"</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Parent read %"</span><span class="n">PRIu64</span><span class="s">" (%#"</span><span class="n">PRIx64</span><span class="s">") from efd</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_SUCCESS</span><span class="p">);</span>

    <span class="k">case</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
        <span class="n">err</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">,</span> <span class="s">"fork"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/eventfd.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;pthread.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="n">efd</span><span class="p">;</span> <span class="c1">// Event file descriptor</span>

<span class="c1">// Thread function for the consumer</span>
<span class="kt">void</span><span class="o">*</span> <span class="nf">consumer_thread</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">uint64_t</span> <span class="n">u</span><span class="p">;</span>
    <span class="kt">ssize_t</span> <span class="n">s</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Consumer waiting for signal...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

    <span class="c1">// Wait for event (counter becomes non-zero)</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">efd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">u</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">!=</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"read"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Consumer received signal: %llu</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">u</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Thread function for the producer</span>
<span class="kt">void</span><span class="o">*</span> <span class="nf">producer_thread</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">uint64_t</span> <span class="n">u</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">ssize_t</span> <span class="n">s</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Producer sending signal...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">efd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">u</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">!=</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"write"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">pthread_t</span> <span class="n">producer</span><span class="p">,</span> <span class="n">consumer</span><span class="p">;</span>

    <span class="c1">// Create an eventfd object with an initial value of 0</span>
    <span class="n">efd</span> <span class="o">=</span> <span class="n">eventfd</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">efd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"eventfd"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Create consumer thread</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">consumer</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">consumer_thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"pthread_create"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Sleep for a bit to ensure the consumer is waiting</span>
    <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

    <span class="c1">// Create producer thread</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">producer</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">producer_thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"pthread_create"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Join threads</span>
    <span class="n">pthread_join</span><span class="p">(</span><span class="n">producer</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">pthread_join</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>

    <span class="n">close</span><span class="p">(</span><span class="n">efd</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="use-cases-for-inter-thread-or-inter-process-communication">Use cases for inter-thread or inter-process communication</h2>]]></content><author><name></name></author><category term="sample-posts"/><category term="Linux"/><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry><entry><title type="html">Scheduling Algorithm</title><link href="https://yihan1998.github.io/blog/2024/linux-sched-algorithm/" rel="alternate" type="text/html" title="Scheduling Algorithm"/><published>2024-03-06T15:14:00+00:00</published><updated>2024-03-06T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-sched-algorithm</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-sched-algorithm/"><![CDATA[]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="toc"/><category term="sidebar"/><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://yihan1998.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://yihan1998.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry></feed>