<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://yihan1998.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://yihan1998.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-12T17:14:29+00:00</updated><id>https://yihan1998.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Interrupt and Exception 101</title><link href="https://yihan1998.github.io/blog/2024/linux-irq-101/" rel="alternate" type="text/html" title="Interrupt and Exception 101"/><published>2024-03-12T15:14:00+00:00</published><updated>2024-03-12T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-irq-101</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-irq-101/"><![CDATA[<h1 id="what-are-interrupt-and-exception-and-why-do-we-need-them">What are interrupt and exception and why do we need them?</h1> <p>Interrupt and exception are mechanisms to handle unusual events that happened in the current workflow. Technically speaking, any event that triggers a divergence in execution and incurs a mode switch could be considered as an interrupt or an exception. More specifically, system calls could be counted as one type of software interrupt. But for the sake of simplicity, we will introduce system calls in a separate chapter. Here in this chapter, we are focusing on hardware interrupt and exception.</p> <p>The reason for having interrupt is that some events need to be processed in a timely manner. These events include but not limited to incoming of network packets, keyboard input, and inter-process interrupt.</p> <p>The reason for having exception is that errors happen constantly during runtime.</p> <h1 id="how-do-interrupt-and-exception-work">How do interrupt and exception work?</h1> <p>Interrupt and exception are often introduced together. Despite that they share a lot in common, we have to clarify the difference between them in the very beginning. I am going to use The Bear — highly recommended, though my anxiety level rockets to the sky every single time I watch it — as an example to elaborate the similarity and difference between these too concepts.</p> <h2 id="an-example-of-interrupt">An example of interrupt</h2> <p>Imagine you are Carmy. The beef is sitting nicely in the pot on the stove and you are preparing for the lunch time. Suddenly some random stupid thing happens out of blue, for example, the water pipe just simply decides to burst. What can you do about it? You are a well trained chef, not a plumber. So you phone up someone who can fix the pipe, and then return to the beef as soon as possible because it is being left unattended. Finally the guy comes and fixes the pipe just before the restaurant opens. Phew! That was close!</p> <h2 id="an-example-of-exception">An example of exception</h2> <p>You are still Carmy in this case. The beef is getting ready and the smell is so good right now. Time to prepare the assembling of the sandwiches — but wait! Someone screwed up the number of buns and now you are several dozens short of them. What choice do you have? You have to try your best to make as many buns as possible before the customers flood in. Luckily you are able to bake enough of them just half an hour prior the opening of the restaurant and now it’s time to assemble some delicious sandwiches for all those hungry mouths. Another day another dollar right?</p> <h2 id="similarities-and-differences">Similarities and differences</h2>]]></content><author><name></name></author><category term="sample-posts"/><category term="Linux"/><summary type="html"><![CDATA[Guardians of the operating system]]></summary></entry><entry><title type="html">Syscall 101: Introduction to System Calls</title><link href="https://yihan1998.github.io/blog/2024/linux-syscall-101/" rel="alternate" type="text/html" title="Syscall 101: Introduction to System Calls"/><published>2024-03-09T15:14:00+00:00</published><updated>2024-03-09T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-syscall-101</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-syscall-101/"><![CDATA[<h1 id="tldr">TL;DR</h1> <h1 id="what-are-system-calls-and-why-do-we-need-them">What are system calls and why do we need them</h1> <p>System calls are the interface exposed by the Kernel for communication between the user programs and certain Kernel services. These services include but not limited to time, file, and network. They are implemented within the Kernel mainly due to the following reasons:</p> <ul> <li> <p><strong>Reliability</strong>: If you are an advanced system hacker, you may know tricks that allow you to design file system or network stack completely within the userspace. But for regular program developers, it is easier to rely on the trustworthy Kernel to provide these services. For example, the Kernel ensures that when the program attemps to read out something by calling read() on a TCP socket, it shall receive in sequence data if there is any. The correctness is guaranteed by the network system within the Kernel.</p> </li> <li> <p><strong>Portability</strong>: The portability here are referring to both that across different operating system and between different release verson of one system.</p> </li> <li> <p><strong>Security</strong>: Since the services are provided by the monolithic Kernel and shared among all programs within the system, it is vital to protect the Kernel and benign applications from being contaminated by any destructive behaviours in a potentially malicious environment.</p> </li> </ul> <p>The fundamental reason of having system calls is that programs running in the user mode need to leverage these services which require higher level of priviledge.</p> <h1 id="how-do-system-calls-work">How do system calls work</h1> <p>I always explain how system calls work to people as trying to order food in a foreign country. Imagine you walk into a restaurant, starving, but unfortunately are only capable of speaking the language at the beginner level on Duolingo. What do you do? Obviously it is too late for you to learn how to speak another language. So you pick up the menu, and thank God that the owner is considerate enough to assign numbers to each item. You decide to order #5 — whatever that is — and signal the waiter. He approaches and you say “#5 please” using your limited language skill and pray that you get it right. After some time he comes back with the right meal — luckily — and hopefully it fits your appetite.</p> <p>This is basically what happens when a program tries to invoke a system call, where the program is the nervous customer, the Kernel is the waiter, and the system call table is the menu with numbers on items.</p> <pre><code class="language-mermaid">sequenceDiagram
    participant User
    participant Kernel

    User-&gt;&gt;+Kernel: I want to read() from a socket
    Kernel-&gt;&gt;Kernel: Try to read out bytes if there is any from the socket buffer
    Kernel-&gt;&gt;-User: Return the number of read out data or -1
</code></pre> <h1 id="want-to-know-more-about-how-system-calls-are-implemented">Want to know more about how system calls are implemented?</h1>]]></content><author><name></name></author><category term="sample-posts"/><category term="Linux"/><summary type="html"><![CDATA[Gatekeepers of the Kernel world]]></summary></entry><entry><title type="html">Syscall 201: The Lifecycle of System Calls in Operaing System</title><link href="https://yihan1998.github.io/blog/2024/linux-syscall-201/" rel="alternate" type="text/html" title="Syscall 201: The Lifecycle of System Calls in Operaing System"/><published>2024-03-09T15:14:00+00:00</published><updated>2024-03-09T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-syscall-201</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-syscall-201/"><![CDATA[<p>In this article, we are getting a general overview of the life cycle of system calls — how they are defined, declared, organized, and more importantly, invoked inside the Kernel.</p> <h1 id="quick-recap-on-syscall">Quick Recap on Syscall</h1> <table> <thead> <tr> <th style="text-align: center">Terms</th> <th style="text-align: center">In a Nutshell</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">System call</td> <td style="text-align: center">Interface between userspace programs and the Kernel services</td> </tr> <tr> <td style="text-align: center">Syscall table</td> <td style="text-align: center">An array of system calls where the location of syscall functions are stored</td> </tr> <tr> <td style="text-align: center">Syscall number</td> <td style="text-align: center">The offset used to look up the corresponding syscall in the system call table</td> </tr> </tbody> </table> <h1 id="the-journey-before-the-kernel-even-exists">The Journey before the Kernel even exists</h1> <h2 id="define-a-system-call-function">Define a System Call Function</h2> <p>In Linux Kernel, every system call function is defined via a macro called <code class="language-plaintext highlighter-rouge">SYSCALL_DEFINEx</code>, where <code class="language-plaintext highlighter-rouge">x</code> stands for the number of arguments this system call function takes. We shall take a closer look at this macro in the next blog.</p> <h2 id="establishment-of-system-call-table">Establishment of System Call Table</h2> <p>The system call table is a globally shared variable inside the Kernel. Therefore, every system call made by any process is actually accessing the same memory region where the table is stored. In short, the system call table is an array of function pointers, where the index indicates the system call number of the corresponding syscall function.</p> <p>In the actual Kernel, there could be hundreds of system calls and manually filling the table is obviously both unrealistic and not extendable. If you want to know more about the initialization trick here, do check out the following articles of system calls.</p> <h1 id="call-of-the-adventure-triggering-a-system-call">Call of the adventure: triggering a system call</h1> <p>Typically, there are two ways to invoke a system call — though this is not exactly accurate because they are fundamentally the same — direct invocation by specifying the system call number and trapping straight into the Kernel, while indirect invocation by using certain library function which does the former invocation on your behalf.</p> <p>It is worth noticing that system calls are one of the few ways that incur mode switch between the user and kernel space. The others are interrupt (e.g., from keyboard) and exception (e.g., dividing by 0), which we will cover in other chapters. The exact instruction that cause mode switching in system call differs from underlying instruction set architecture. For those who have learned assembly before, you might come across the instruction <code class="language-plaintext highlighter-rouge">int 0x80</code>. This is commonly used in <code class="language-plaintext highlighter-rouge">x86</code> architecture to invoke a system call. While in <code class="language-plaintext highlighter-rouge">x86_64</code>, such role is replaced by a faster<code class="language-plaintext highlighter-rouge">syscall</code> instruction.</p> <h1 id="dive-into-the-kernel-world">Dive into the Kernel world</h1> <h1 id="execute-the-system-call">Execute the system call</h1> <h1 id="return-back-to-the-userspace">Return back to the userspace</h1>]]></content><author><name></name></author><category term="sample-posts"/><category term="Linux"/><summary type="html"><![CDATA[How are system calls handled by the OS?]]></summary></entry><entry><title type="html">Syscall 301: A Deep Dive into the Syscall Mechanism in Linux Kernel</title><link href="https://yihan1998.github.io/blog/2024/linux-syscall-301/" rel="alternate" type="text/html" title="Syscall 301: A Deep Dive into the Syscall Mechanism in Linux Kernel"/><published>2024-03-09T15:14:00+00:00</published><updated>2024-03-09T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-syscall-301</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-syscall-301/"><![CDATA[<p>In this artical, we are taking a deep dive into the system call mechanism in Linux Kernel 5.4 running on <code class="language-plaintext highlighter-rouge">x86_64</code> architecture.</p> <h1 id="setting-up-the-syscall-table">Setting up the syscall table</h1> <p>The Linux Kernel utilizes a lot of tricks in C in an impressive way and the syscall table initilization is one of my favourite. It is a perfect example of how coding in C can be elegant, flexible, and creative.</p> <p>The definition of syscall table – also known as <code class="language-plaintext highlighter-rouge">sys_call_table</code> – locates in <code class="language-plaintext highlighter-rouge">/arch/x86/entry/syscall_64.c</code> and is an array of function pointers. Below is the source code that performs syscall table setup:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define __SYSCALL_64(nr, sym, qual) extern asmlinkage long sym(const struct pt_regs *);
#include</span> <span class="cpf">&lt;asm/syscalls_64.h&gt;</span><span class="cp">
#undef __SYSCALL_64
</span>
<span class="cp">#define __SYSCALL_64(nr, sym, qual) [nr] = sym,
</span>
<span class="n">asmlinkage</span> <span class="k">const</span> <span class="n">sys_call_ptr_t</span> <span class="n">sys_call_table</span><span class="p">[</span><span class="n">__NR_syscall_max</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
	<span class="p">[</span><span class="mi">0</span> <span class="p">...</span> <span class="n">__NR_syscall_max</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">__x64_sys_ni_syscall</span><span class="p">,</span>
<span class="cp">#include</span> <span class="cpf">&lt;asm/syscalls_64.h&gt;</span><span class="cp">
</span><span class="p">};</span>

<span class="cp">#undef __SYSCALL_64
</span></code></pre></div></div> <p>Remember we talked about the how unrealistic to manually initialize the syscall table in the previous artical? Here we are going to unveal the magic trick applied by the Linux Kernel, which is the use of <code class="language-plaintext highlighter-rouge">#define</code>, <code class="language-plaintext highlighter-rouge">#include</code>, and <code class="language-plaintext highlighter-rouge">#undef</code>.</p> <blockquote> <p>The first <code class="language-plaintext highlighter-rouge">__SYSCALL_64</code> generates the declaration of every syscall handler.</p> <p>The second <code class="language-plaintext highlighter-rouge">__SYSCALL_64</code> loads the address syscall handler into the <code class="language-plaintext highlighter-rouge">sys_call_table</code> array, using their syscall number as the index within the syscall table.</p> </blockquote> <p>Such a creative way of using the feature of C during the preprocessing phase! By defining, undefining, and redefining only one macro, the preprocessor could automatically generate all declaration of every syscall handler and the whole syscall table! How seemingless yet highly efficient it is!</p> <p>Now, if you are still curious about what is in this header, and how it is loaded when included, fasten your seat belt because we are going follow the preprocessor to see how miracle is performed. Allons-y!</p> <h2 id="what-is-in-asmsyscalls_64h">What is in <code class="language-plaintext highlighter-rouge">&lt;asm/syscalls_64.h&gt;</code>?</h2> <p>When I saw the above syscall initialization for the first time, I was shocked and confused: how and why does <code class="language-plaintext highlighter-rouge">&lt;asm/syscalls_64.h&gt;</code> get included here twice yet expanded into two different pieces of codes?</p> <p>To understand why, we need to look into the content of this header, which locates under <code class="language-plaintext highlighter-rouge">/arch/x86/include/generated/asm/syscalls_64.h</code>. Below is a clip of it:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__SYSCALL_64</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">__x64_sys_read</span><span class="p">,</span> <span class="p">)</span>
<span class="n">__SYSCALL_64</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">__x64_sys_write</span><span class="p">,</span> <span class="p">)</span>
<span class="n">__SYSCALL_64</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">__x64_sys_open</span><span class="p">,</span> <span class="p">)</span>
<span class="n">__SYSCALL_64</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">__x64_sys_close</span><span class="p">,</span> <span class="p">)</span>
<span class="p">...</span>
</code></pre></div></div> <p>For the sake of simplicity, I only show the what will be compiled on <code class="language-plaintext highlighter-rouge">x86_64</code>.</p> <h2 id="why-does-archx86includegenerated-seem-weird">Why does <code class="language-plaintext highlighter-rouge">/arch/x86/include/generated</code> seem weird?</h2> <p>My first impression when I looked at this path is: how could someone name the folder to be <code class="language-plaintext highlighter-rouge">generated</code>? But the answer is somewhat unsurprising: because this folder <strong>is</strong> generated! But how, why, and by whom?</p> <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">out</span> <span class="o">:=</span> <span class="nb">arch</span>/<span class="p">$(</span>SRCARCH<span class="p">)</span>/include/generated/asm

<span class="nv">syscall64</span> <span class="o">:=</span> <span class="p">$(</span>srctree<span class="p">)</span>/<span class="p">$(</span>src<span class="p">)</span>/syscall_64.tbl

<span class="nv">systbl</span> <span class="o">:=</span> <span class="p">$(</span>srctree<span class="p">)</span>/<span class="p">$(</span>src<span class="p">)</span>/syscalltbl.sh

<span class="nl">$(out)/syscalls_64.h</span><span class="o">:</span> <span class="nf">$(syscall64) $(systbl)</span>
	<span class="p">$(</span>call if_changed,systbl<span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="Linux"/><summary type="html"><![CDATA[How does Linux actually implement systems calls?]]></summary></entry><entry><title type="html">WebAssembly 101</title><link href="https://yihan1998.github.io/blog/2024/intro-to-wasm/" rel="alternate" type="text/html" title="WebAssembly 101"/><published>2024-03-08T18:06:00+00:00</published><updated>2024-03-08T18:06:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/intro-to-wasm</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/intro-to-wasm/"><![CDATA[<h1 id="what-is-webassembly-wasm">What is WebAssembly (WASM)?</h1>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="toc"/><category term="sidebar"/><summary type="html"><![CDATA[Introduction to WebAssembly]]></summary></entry><entry><title type="html">I/O Multiplexing 101</title><link href="https://yihan1998.github.io/blog/2024/linux-fs-io-multiplexing/" rel="alternate" type="text/html" title="I/O Multiplexing 101"/><published>2024-03-06T15:14:00+00:00</published><updated>2024-03-06T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-fs-io-multiplexing</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-fs-io-multiplexing/"><![CDATA[<h1 id="tldr">TL;DR</h1> <table> <thead> <tr> <th style="text-align: left">Mechanism</th> <th style="text-align: center">In a Nutshell</th> <th style="text-align: center">Use Cases</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Select</code></td> <td style="text-align: center">:crown: OG of I/O multiplexing</td> <td style="text-align: center">Multiplexing for a small set of connections</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Poll</code></td> <td style="text-align: center">:raised_hand: I’m like you but with flexible set of file descriptors</td> <td style="text-align: center">Multiplexing for more connections</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Epoll</code></td> <td style="text-align: center">:raised_hands: I’m like you two but more scalable</td> <td style="text-align: center">Commonly used in high-performace server applications when there are thousands of connections</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Eventfd</code></td> <td style="text-align: center">:v:Here to provide lightweight notification</td> <td style="text-align: center">Lightweight synchronization between threads. Can be combined with <code class="language-plaintext highlighter-rouge">epoll</code> to achieve asynchronous event notification in multi-threaded environment.</td> </tr> </tbody> </table> <h1 id="what-is-io-ultiplexing-and-why-do-we-need-it">What is I/O ultiplexing and why do we need it</h1> <h1 id="select-og-of-io-multiplexing"><code class="language-plaintext highlighter-rouge">Select</code>: OG of I/O Multiplexing</h1> <h2 id="how-select-works">How <code class="language-plaintext highlighter-rouge">select</code> works</h2> <h2 id="example-code">Example code</h2> <h2 id="advantages-and-limitations">Advantages and limitations</h2> <h2 id="typical-use-cases">Typical use cases</h2> <h1 id="poll-for-better-connection-scalability"><code class="language-plaintext highlighter-rouge">Poll</code>: For better connection scalability</h1> <h2 id="how-poll-works">How <code class="language-plaintext highlighter-rouge">poll</code> works</h2> <h2 id="differences-and-similarities-with-select">Differences and similarities with <code class="language-plaintext highlighter-rouge">select</code></h2> <h2 id="example-code-1">Example code</h2> <h2 id="advantages-and-limitations-1">Advantages and limitations</h2> <h2 id="typical-use-cases-1">Typical use cases</h2> <h1 id="epoll-im-you-but-stronger"><code class="language-plaintext highlighter-rouge">Epoll</code>: I’m you, but stronger!</h1> <h2 id="how-epoll-works">How <code class="language-plaintext highlighter-rouge">epoll</code> works</h2> <h2 id="edge-triggered-vs-level-triggered-modes">Edge-triggered vs. level-triggered modes</h2> <h2 id="example-code-2">Example code</h2> <h2 id="advantages-and-limitations-2">Advantages and limitations</h2> <h2 id="typical-use-cases-2">Typical use cases</h2> <h1 id="eventfd-to-the-world-of-event-driven-programming"><code class="language-plaintext highlighter-rouge">Eventfd</code>: To the world of event-driven programming</h1> <h2 id="how-eventfd-works">How <code class="language-plaintext highlighter-rouge">eventfd</code> works</h2> <h2 id="how-eventfd-complements-epoll">How <code class="language-plaintext highlighter-rouge">eventfd</code> complements <code class="language-plaintext highlighter-rouge">epoll</code></h2> <h2 id="example-code-3">Example code</h2> <h2 id="use-cases-for-inter-thread-or-inter-process-communication">Use cases for inter-thread or inter-process communication</h2>]]></content><author><name></name></author><category term="sample-posts"/><category term="Linux"/><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry><entry><title type="html">Scheduling Algorithm</title><link href="https://yihan1998.github.io/blog/2024/linux-sched-algorithm/" rel="alternate" type="text/html" title="Scheduling Algorithm"/><published>2024-03-06T15:14:00+00:00</published><updated>2024-03-06T15:14:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/linux-sched-algorithm</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/linux-sched-algorithm/"><![CDATA[]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="toc"/><category term="sidebar"/><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://yihan1998.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://yihan1998.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry><entry><title type="html">a post with vega lite</title><link href="https://yihan1998.github.io/blog/2024/vega-lite/" rel="alternate" type="text/html" title="a post with vega lite"/><published>2024-01-27T00:20:00+00:00</published><updated>2024-01-27T00:20:00+00:00</updated><id>https://yihan1998.github.io/blog/2024/vega-lite</id><content type="html" xml:base="https://yihan1998.github.io/blog/2024/vega-lite/"><![CDATA[<p>This is an example post with some <a href="https://vega.github.io/vega-lite/">vega lite</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">vega_lite
</span><span class="sb">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}
</code></pre> <p>This plot supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included vega lite code could look like]]></summary></entry></feed>